{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5257bb27",
   "metadata": {},
   "source": [
    "# Robust PCA\n",
    "\n",
    "This notebook contains examples of how to solve Robust PCA problem.\n",
    "\n",
    "Reference: Yi, Xinyang, et al. \"Fast algorithms for robust PCA via gradient descent.\" Advances in neural information processing systems. 2016.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2ca043d",
   "metadata": {},
   "source": [
    "## Problem Definition"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ae4094e",
   "metadata": {},
   "source": [
    "$$\\min_{M,S}||M||_{\\text{nuc}}+\\lambda||S||_1,$$\n",
    "$$\\text{s.t. }Y=M+S,$$\n",
    "where $M,S\\in R^{d_1,d_2}$ are matrix form optimization variables, $Y\\in R^{d_1,d_2}$ is a given matrix, and $||\\cdot||_{\\text{nuc}}$ denotes the nuclear norm."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08dfdd50",
   "metadata": {},
   "source": [
    "## Import all necessary modules and add PyGRANSO src folder to system path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "90ed32f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import sys\n",
    "## Adding PyGRANSO directories. Should be modified by user\n",
    "sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')\n",
    "from pygranso import pygranso\n",
    "from pygransoStruct import Options, Data, GeneralStruct "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17a1b7fe",
   "metadata": {},
   "source": [
    "## Specify torch device, and generate data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b4842e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device( 'cpu')\n",
    "d1 = 5\n",
    "d2 = 10\n",
    "torch.manual_seed(1)\n",
    "eta = .5\n",
    "Y = torch.randn(d1,d2).to(device=device, dtype=torch.double)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec80716b",
   "metadata": {},
   "source": [
    "## Spceify optimization variables and corresponding objective and constrained function.\n",
    "\n",
    "Note: please strictly follow the format of evalObjFunction and combinedFunction, which will be used in the PyGRANSO main algortihm. *X_struct* and *data_in* are always required."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb360e75",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variables and corresponding dimensions.\n",
    "var_in = {\"M\": [d1,d2],\"S\": [d1,d2]}\n",
    "\n",
    "def evalObjFunction(X_struct):\n",
    "    M = X_struct.M\n",
    "    S = X_struct.S\n",
    "    M.requires_grad_(True)\n",
    "    S.requires_grad_(True)\n",
    "\n",
    "    # objective function\n",
    "    f = torch.norm(M, p = 'nuc') + eta * torch.norm(S, p = 1)\n",
    "    return f\n",
    "\n",
    "def combinedFunction(X_struct):\n",
    "    M = X_struct.M\n",
    "    S = X_struct.S\n",
    "    M.requires_grad_(True)\n",
    "    S.requires_grad_(True)\n",
    "    \n",
    "    # objective function\n",
    "    f = torch.norm(M, p = 'nuc') + eta * torch.norm(S, p = 1)\n",
    "\n",
    "    # inequality constraint, matrix form\n",
    "    ci = None\n",
    "    \n",
    "    # equality constraint \n",
    "    ce = GeneralStruct()\n",
    "    ce.c1 = M + S - Y\n",
    "\n",
    "    return [f,ci,ce]\n",
    "\n",
    "obj_eval_fn = lambda X_struct: evalObjFunction(X_struct)\n",
    "comb_fn = lambda X_struct: combinedFunction(X_struct)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0f55ace",
   "metadata": {},
   "source": [
    "## Specify user-defined options for PyGRANSO algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3a65b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "opts = Options()\n",
    "opts.QPsolver = 'osqp' \n",
    "opts.print_frequency = 10\n",
    "opts.x0 = .2 * torch.ones((2*d1*d2,1)).to(device=device, dtype=torch.double)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bca18c7",
   "metadata": {},
   "source": [
    "## Run main algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "632976b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: Python numerical package using GRadient-based Algorithm for Non-Smooth Optimization                    ║ \n",
      "Version 1.1.0                                                                                                    ║ \n",
      "MIT License Copyright (c) 2021 SUN Group @ UMN                                                                   ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   100                                                                      ║ \n",
      " # of inequality constraints        :     0                                                                      ║ \n",
      " # of equality constraints          :    50                                                                      ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║ Ineq │    Eq    ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  53.4967399094 ║  6.41421356237 ║   -  │ 3.731154 ║ -  │     1 │ 0.000000 ║     1 │ 6.018217   ║ \n",
      "  10 ║ 0.150095 │  2.27183485513 ║  15.1360163268 ║   -  │ 4.53e-10 ║ S  │     2 │ 2.000000 ║     1 │ 0.117247   ║ \n",
      "  20 ║ 0.047101 │  0.70313740988 ║  14.9281994555 ║   -  │ 2.86e-10 ║ S  │     3 │ 0.250000 ║     1 │ 221.5967   ║ \n",
      "  30 ║ 0.008728 │  0.12961986324 ║  14.8511001075 ║   -  │ 2.55e-10 ║ S  │     1 │ 1.000000 ║     1 │ 0.008903   ║ \n",
      "  40 ║ 0.004638 │  0.06882630688 ║  14.8383798633 ║   -  │ 6.18e-12 ║ S  │     1 │ 1.000000 ║     1 │ 0.001264   ║ \n",
      "  50 ║ 0.001797 │  0.02666160637 ║  14.8366457710 ║   -  │ 1.03e-10 ║ S  │     4 │ 0.125000 ║     1 │ 0.002699   ║ \n",
      "  60 ║ 1.29e-04 │  0.00191396238 ║  14.8360805480 ║   -  │ 4.56e-10 ║ S  │    30 │ 1.86e-09 ║     1 │ 0.067763   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Optimization results:                                                                                            ║ \n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  14.8360315895 ║   -  │ 2.22e-16 ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  14.8360292585 ║   -  │ 1.31e-10 ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  14.8360315895 ║   -  │ 2.22e-16 ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              62                                                                                      ║ \n",
      "Function evaluations:    183                                                                                     ║ \n",
      "PyGRANSO termination code: 6 --- line search bracketed a minimizer but failed to satisfy Wolfe conditions at a   ║ \n",
      "feasible point (to tolerances).  This may be an indication that approximate stationarity has been attained.      ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 2.573131799697876s\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "soln = pygranso(combinedFunction = comb_fn, objEvalFunction = obj_eval_fn,var_dim_map = var_in, torch_device = device, user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
