{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5257bb27",
   "metadata": {},
   "source": [
    "# Eigenvalue Optimization\n",
    "\n",
    "Eigenvalue Optimization taken from: GRANSO (http://www.timmitchell.com/software/GRANSO/) demo example 4."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16ae1959",
   "metadata": {},
   "source": [
    "## Problem Description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72e3a77a",
   "metadata": {},
   "source": [
    "We have $M=A+BXC$,\n",
    "where the matrices $A\\in R^{N,N},B\\in R^{N,M}$ and $C\\in R^{P,N}$ are given, $X\\in R^{M,P}$ is the matrix form optimization variable.\n",
    "\n",
    "We have the nonconvex, nonsmooth, and constrained optimization problem\n",
    "$$\\min_{X}\\max| \\mathrm{Im} (\\Lambda(A+BXC))|,$$\n",
    "$$\\text{s.t. }\\alpha(A+BXC)+\\xi \\leq 0,$$\n",
    "where $\\mathrm{Im}(\\cdot)$ is the imaginary part of complex number, $\\xi$ is the stability margin, and $\\Lambda(\\cdot)$ is the spectrum of a square matrix $\\cdot$, and $\\alpha(\\cdot)$ is the spectral abscissa of a square matrix, i.e., the maximum real part of its eigenvalues."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08dfdd50",
   "metadata": {},
   "source": [
    "## Modules Importing\n",
    "Import all necessary modules and add PyGRANSO src folder to system path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "90ed32f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import os,sys\n",
    "## Adding PyGRANSO directories. Should be modified by user\n",
    "sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')\n",
    "from pygranso import pygranso\n",
    "from pygransoStruct import pygransoStruct\n",
    "import scipy.io\n",
    "from torch import linalg as LA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17a1b7fe",
   "metadata": {},
   "source": [
    "## Data Generation \n",
    "Specify torch device, and read the data from a provided file.\n",
    "\n",
    "Use GPU for this problem. If no cuda device available, please set *device = torch.device('cpu')*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b4842e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda')\n",
    "\n",
    "# currentdir = os.path.dirname(os.path.realpath(__file__))\n",
    "file = \"/home/buyun/Documents/GitHub/PyGRANSO/examples/data/spec_radius_opt_data.mat\"\n",
    "mat = scipy.io.loadmat(file)\n",
    "mat_struct = mat['sys']\n",
    "mat_struct = mat_struct[0,0]\n",
    "A = torch.from_numpy(mat_struct['A']).to(device=device, dtype=torch.double)\n",
    "B = torch.from_numpy(mat_struct['B']).to(device=device, dtype=torch.double)\n",
    "C = torch.from_numpy(mat_struct['C']).to(device=device, dtype=torch.double)\n",
    "p = B.shape[1]\n",
    "m = C.shape[0]\n",
    "stability_margin = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec80716b",
   "metadata": {},
   "source": [
    "## Problem Definition \n",
    "Specify optimization variables, and objective and constraint(s).\n",
    "\n",
    "Note: please strictly follow the format of comb_fn, which will be used in the PyGRANSO main algortihm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb360e75",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variables and corresponding dimensions.\n",
    "var_in = {\"X\": [p,m] }\n",
    "\n",
    "def comb_fn(X_struct):\n",
    "    # user defined variable, matirx form. torch tensor\n",
    "    X = X_struct.X\n",
    "\n",
    "    # objective function\n",
    "    M           = A + B@X@C\n",
    "    [D,_]       = LA.eig(M)\n",
    "    f = torch.max(D.imag)\n",
    "\n",
    "    # inequality constraint, matrix form\n",
    "    ci = pygransoStruct()\n",
    "    ci.c1 = torch.max(D.real) + stability_margin\n",
    "\n",
    "    # equality constraint \n",
    "    ce = None\n",
    "    \n",
    "    return [f,ci,ce]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0f55ace",
   "metadata": {},
   "source": [
    "## User Options\n",
    "Specify user-defined options for PyGRANSO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3a65b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "opts = pygransoStruct()\n",
    "opts.torch_device = device\n",
    "opts.maxit = 200\n",
    "opts.x0 = torch.zeros(p*m,1).to(device=device, dtype=torch.double)\n",
    "# print for every 10 iterations. default: 1\n",
    "opts.print_frequency = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bca18c7",
   "metadata": {},
   "source": [
    "## Main Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "632976b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: A PyTorch-enabled port of GRANSO with auto-differentiation                                             ║ \n",
      "Version 1.0.0                                                                                                    ║ \n",
      "Licensed under the AGPLv3, Copyright (C) 2021 Tim Mitchell and Buyun Liang                                       ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   200                                                                      ║ \n",
      " # of inequality constraints        :     1                                                                      ║ \n",
      " # of equality constraints          :     0                                                                      ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  16.2063030241 ║  13.7635444107 ║ 2.442759 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 28.28938   ║ \n",
      "  10 ║ 1.000000 │  14.3591621233 ║  12.9268286638 ║ 1.432333 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.035476   ║ \n",
      "  20 ║ 1.000000 │  13.7108679313 ║  12.6560777195 ║ 1.054790 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.039916   ║ \n",
      "  30 ║ 1.000000 │  12.9782826562 ║  12.2695332150 ║ 0.708749 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.044691   ║ \n",
      "  40 ║ 1.000000 │  12.6327992702 ║  12.0881368328 ║ 0.544662 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.033108   ║ \n",
      "  50 ║ 1.000000 │  12.3649457378 ║  11.9515171041 ║ 0.413429 │   -  ║ S  │    11 │ 9.77e-04 ║     1 │ 0.033030   ║ \n",
      "  60 ║ 1.000000 │  12.1488822526 ║  11.8756653333 ║ 0.273217 │   -  ║ S  │     8 │ 0.007812 ║     1 │ 0.066408   ║ \n",
      "  70 ║ 0.900000 │  10.7952264548 ║  11.7579881392 ║ 0.213037 │   -  ║ S  │     9 │ 0.003906 ║     1 │ 0.066670   ║ \n",
      "  80 ║ 0.729000 │  8.68215228283 ║  11.7105430391 ║ 0.145166 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.019056   ║ \n",
      "  90 ║ 0.729000 │  8.59099651273 ║  11.6649487614 ║ 0.087249 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.049679   ║ \n",
      " 100 ║ 0.729000 │  8.50487931444 ║  11.6326910365 ║ 0.024648 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.010391   ║ \n",
      " 110 ║ 0.729000 │  8.44227027647 ║  11.5668487034 ║ 0.010038 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.010234   ║ \n",
      " 120 ║ 0.729000 │  8.41458093098 ║  11.5073746040 ║ 0.025705 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.042836   ║ \n",
      " 130 ║ 0.729000 │  8.36631369930 ║  11.4764248276 ║ 0.000000 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.028383   ║ \n",
      " 140 ║ 0.729000 │  8.29043814539 ║  11.3723431350 ║ 0.000000 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.055740   ║ \n",
      " 150 ║ 0.729000 │  8.25338730807 ║  11.3215189411 ║ 0.000000 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.009694   ║ \n",
      " 160 ║ 0.729000 │  8.20341965680 ║  11.2529762096 ║ 0.000000 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.012498   ║ \n",
      " 170 ║ 0.254187 │  2.84712243525 ║  11.1888675593 ║ 0.003062 │   -  ║ S  │     8 │ 0.007812 ║     1 │ 0.093439   ║ \n",
      " 180 ║ 0.254187 │  2.83693245149 ║  11.1608269008 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.010994   ║ \n",
      " 190 ║ 0.254187 │  2.82497487650 ║  11.1137843903 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.033876   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      " 200 ║ 0.254187 │  2.81698658846 ║  11.0823575228 ║ 0.000000 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.010892   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Optimization results:                                                                                            ║ \n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  11.0823575228 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  11.0823575228 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  11.0823575228 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              200                                                                                     ║ \n",
      "Function evaluations:    946                                                                                     ║ \n",
      "PyGRANSO termination code: 4 --- max iterations reached.                                                         ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 66.9097728729248s\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eec4c44",
   "metadata": {},
   "source": [
    "## LBFGS \n",
    "(Optional) LBFGS and feasibility related options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f97cf86d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: A PyTorch-enabled port of GRANSO with auto-differentiation                                             ║ \n",
      "Version 1.0.0                                                                                                    ║ \n",
      "Licensed under the AGPLv3, Copyright (C) 2021 Tim Mitchell and Buyun Liang                                       ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   200                                                                      ║ \n",
      " # of inequality constraints        :     1                                                                      ║ \n",
      " # of equality constraints          :     0                                                                      ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "\u001b[33mLimited-memory mode enabled with size = 40.                                                                     \u001b[0m ║ \n",
      "\u001b[33mNOTE: limited-memory mode is generally NOT                                                                      \u001b[0m ║ \n",
      "\u001b[33mrecommended for nonsmooth problems.                                                                             \u001b[0m ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  16.2063030241 ║  13.7635444107 ║ 2.442759 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 28.28938   ║ \n",
      "  10 ║ 1.000000 │  14.3591621233 ║  12.9268286638 ║ 1.432333 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.035476   ║ \n",
      "  20 ║ 1.000000 │  13.7108148212 ║  12.6560766192 ║ 1.054738 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.039916   ║ \n",
      "  30 ║ 1.000000 │  12.9781024808 ║  12.2692651748 ║ 0.708837 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.044753   ║ \n",
      "  40 ║ 1.000000 │  12.7159660799 ║  12.0997226025 ║ 0.616243 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.024262   ║ \n",
      "  50 ║ 1.000000 │  12.4442878287 ║  11.9156949572 ║ 0.528593 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.085052   ║ \n",
      "  60 ║ 1.000000 │  12.2169768208 ║  11.9336819474 ║ 0.283295 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.048213   ║ \n",
      "  70 ║ 1.000000 │  11.9829435315 ║  11.8156417233 ║ 0.167302 │   -  ║ S  │    14 │ 3.66e-04 ║     1 │ 0.053810   ║ \n",
      "  80 ║ 0.656100 │  7.86582717536 ║  11.7264330023 ║ 0.172114 │   -  ║ S  │     9 │ 0.003906 ║     1 │ 1.209730   ║ \n",
      "  90 ║ 0.656100 │  7.80915840969 ║  11.6599468664 ║ 0.159067 │   -  ║ S  │     8 │ 0.007812 ║     1 │ 0.152102   ║ \n",
      " 100 ║ 0.656100 │  7.77271535489 ║  11.6562870552 ║ 0.125025 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.197885   ║ \n",
      " 110 ║ 0.656100 │  7.69334190482 ║  11.6426294560 ║ 0.054613 │   -  ║ S  │    12 │ 4.88e-04 ║     1 │ 301.4429   ║ \n",
      " 120 ║ 0.387420 │  4.56044332123 ║  11.6303641272 ║ 0.054602 │   -  ║ S  │    17 │ 1.53e-05 ║     2 │ 0.628764   ║ \n",
      " 130 ║ 0.228768 │  2.69608868283 ║  11.6220688973 ║ 0.037332 │   -  ║ S  │    11 │ 9.77e-04 ║     1 │ 2.365393   ║ \n",
      " 140 ║ 0.228768 │  2.67000543404 ║  11.6090287891 ║ 0.014232 │   -  ║ S  │    11 │ 9.77e-04 ║     1 │ 1.856183   ║ \n",
      " 150 ║ 0.228768 │  2.65700583097 ║  11.6093870983 ║ 0.001150 │   -  ║ S  │    10 │ 0.001953 ║     1 │ 2.145789   ║ \n",
      " 160 ║ 0.135085 │  1.56723761228 ║  11.6000071452 ║ 2.49e-04 │   -  ║ S  │    14 │ 1.22e-04 ║     1 │ 1.482514   ║ \n",
      " 170 ║ 0.135085 │  1.56607139807 ║  11.5932146925 ║ 0.000000 │   -  ║ S  │    25 │ 5.36e-07 ║     2 │ 0.061139   ║ \n",
      " 180 ║ 0.088629 │  1.02659085020 ║  11.5824604074 ║ 4.46e-05 │   -  ║ S  │     8 │ 0.023438 ║     1 │ 0.122992   ║ \n",
      " 190 ║ 0.088629 │  1.02587101173 ║  11.5748411857 ║ 0.000000 │   -  ║ S  │    12 │ 4.88e-04 ║     1 │ 3.594037   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      " 200 ║ 0.088629 │  1.02530889608 ║  11.5683247905 ║ 1.54e-05 │   -  ║ S  │    13 │ 2.44e-04 ║     1 │ 0.111470   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Optimization results:                                                                                            ║ \n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  11.5683247905 ║ 1.54e-05 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  11.5661121757 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  11.5661121757 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              200                                                                                     ║ \n",
      "Function evaluations:    1727                                                                                    ║ \n",
      "PyGRANSO termination code: 4 --- max iterations reached.                                                         ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 125.25309157371521s\n"
     ]
    }
   ],
   "source": [
    "opts = pygransoStruct()\n",
    "opts.torch_device = device\n",
    "opts.maxit = 200\n",
    "opts.x0 = torch.zeros(p*m,1).to(device=device, dtype=torch.double)\n",
    "# print for every 10 iterations. default: 1\n",
    "opts.print_frequency = 10\n",
    "\n",
    "# Limited-memory mode is generally not recommended for nonsmooth\n",
    "# problems, such as this one, but it can nonetheless enabled if\n",
    "# desired/necessary.  opts.limited_mem_size == 0 is off, that is, \n",
    "# limited-memory mode is disabled.\n",
    "# Note that this example has 200 variables.\n",
    "opts.limited_mem_size = 40\n",
    "\n",
    "start = time.time()\n",
    "soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8dff3916",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can also tune PyGRANSO to more aggressively favor satisfying\n",
    "# feasibility over minimizing the objective.  Set feasibility_bias to\n",
    "# true to adjust the following three steering parameters away from\n",
    "# their default values.  For more details on these parameters, type\n",
    "# import pygransoOptionsAdvanced\n",
    "# help(pygransoOptionsAdvanced)\n",
    "import numpy as np\n",
    "opts = pygransoStruct()\n",
    "opts.torch_device = device\n",
    "feasibility_bias = True\n",
    "if feasibility_bias:\n",
    "    opts.steering_ineq_margin = np.inf    # default is 1e-6\n",
    "    opts.steering_c_viol = 0.9         # default is 0.1\n",
    "    opts.steering_c_mu = 0.1           # default is 0.9\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3fb2e962",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: A PyTorch-enabled port of GRANSO with auto-differentiation                                             ║ \n",
      "Version 1.0.0                                                                                                    ║ \n",
      "Licensed under the AGPLv3, Copyright (C) 2021 Tim Mitchell and Buyun Liang                                       ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   200                                                                      ║ \n",
      " # of inequality constraints        :     1                                                                      ║ \n",
      " # of equality constraints          :     0                                                                      ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  16.2063030241 ║  13.7635444107 ║ 2.442759 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 28.28938   ║ \n",
      "  10 ║ 0.100000 │  2.59802946760 ║  13.5350279096 ║ 1.244527 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.021953   ║ \n",
      "  20 ║ 0.100000 │  2.19206992214 ║  13.1633300318 ║ 0.875737 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.022714   ║ \n",
      "  30 ║ 0.100000 │  1.78022218437 ║  13.1123257659 ║ 0.468990 │   -  ║ S  │     8 │ 0.039062 ║     1 │ 0.002266   ║ \n",
      "  40 ║ 0.100000 │  1.62760111526 ║  13.0064275307 ║ 0.326958 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.009626   ║ \n",
      "  50 ║ 0.100000 │  1.36861864889 ║  12.9968510787 ║ 0.068934 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.006985   ║ \n",
      "  60 ║ 0.100000 │  1.27342250363 ║  12.7342250363 ║ 0.000000 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.002375   ║ \n",
      "  70 ║ 0.010000 │  0.12639690785 ║  12.6396907854 ║ 0.000000 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.001461   ║ \n",
      "  80 ║ 0.010000 │  0.12478128872 ║  12.4781288721 ║ 0.000000 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.027130   ║ \n",
      "  90 ║ 0.010000 │  0.12320252412 ║  12.3202524125 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 5.15e-04   ║ \n",
      " 100 ║ 1.00e-06 │  1.2265298e-05 ║  12.2652978088 ║ 0.000000 │   -  ║ \u001b[33mSI\u001b[0m │    13 │ 2.44e-04 ║     1 │ 1.07e-06   ║ \n",
      " 110 ║ 1.00e-07 │  1.2253519e-06 ║  12.2535193311 ║ 0.000000 │   -  ║ S  │     3 │ 0.250000 ║     6 │ 5.33e-06   ║ \n",
      " 120 ║ 1.00e-07 │  1.2250667e-06 ║  12.2506668619 ║ 0.000000 │   -  ║ S  │     5 │ 16.00000 ║     3 │ 3.73e-06   ║ \n",
      " 130 ║ 1.00e-07 │  1.2240054e-06 ║  12.2400539791 ║ 0.000000 │   -  ║ S  │     2 │ 0.500000 ║     6 │ 1.32e-04   ║ \n",
      " 140 ║ 1.00e-07 │  1.2239967e-06 ║  12.2399666089 ║ 0.000000 │   -  ║ S  │     2 │ 2.000000 ║    16 │ 8.70e-05   ║ \n",
      " 150 ║ 1.00e-07 │  1.2225751e-06 ║  12.2257510172 ║ 3.80e-14 │   -  ║ S  │    21 │ 0.998109 ║     4 │ 5.15e-04   ║ \n",
      " 160 ║ 1.00e-08 │  1.2223800e-07 ║  12.2237998101 ║ 0.000000 │   -  ║ S  │     9 │ 18.00000 ║     9 │ 6.44e-07   ║ \n",
      " 170 ║ 1.00e-08 │  1.2218320e-07 ║  12.2183197774 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     3 │ 6.35e-07   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Optimization results:                                                                                            ║ \n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  12.2183029299 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  12.2183029299 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  12.2183029299 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              174                                                                                     ║ \n",
      "Function evaluations:    648                                                                                     ║ \n",
      "PyGRANSO termination code: 0 --- converged to stationarity and feasibility tolerances.                           ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 46.48832416534424s\n"
     ]
    }
   ],
   "source": [
    "opts.maxit = 200\n",
    "opts.x0 = torch.zeros(p*m,1).to(device=device, dtype=torch.double)\n",
    "# print for every 10 iterations. default: 1\n",
    "opts.print_frequency = 10\n",
    "\n",
    "start = time.time()\n",
    "soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1abe9e7",
   "metadata": {},
   "source": [
    "In my testing, with default parameters, PyGRANSO will first obtain a\n",
    "feasible solution at iter ~= 160 and will reduce the objective to\n",
    "11.60 by the time it attains max iteration count of 200.\n",
    "\n",
    "With feasibility_bias = True, in my testing, PyGRANSO will obtain its\n",
    "first feasible solution earlier, at iter ~= 60, but it will ultimately\n",
    "have reduced the objective value less, only to 12.21, by the end of\n",
    "its 200 maximum allowed iterations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
