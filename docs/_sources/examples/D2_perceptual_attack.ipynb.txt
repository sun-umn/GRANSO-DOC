{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5257bb27",
   "metadata": {},
   "source": [
    "# Perceptual Attack\n",
    "\n",
    "Apply neural perceptual attack to images taken from: Cassidy Laidlaw, Sahil Singla, and Soheil Feizi. [\"Perceptual adversarial robustness: Defense against unseen threat models.\"](https://arxiv.org/abs/2006.12655) arXiv preprint arXiv:2006.12655 (2020)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4364b1e6",
   "metadata": {},
   "source": [
    "## Problem Description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "344f7377",
   "metadata": {},
   "source": [
    "Given a classifier $f$ which maps any input image $x \\in X$ to its label $y = f(x) \\in Y$. The goal of neural perceptual attack is to find an input $\\widetilde{x}$ that is perceptually similar to the original input $x$ but can fool the classifier $f$. This can be formulated as:\n",
    "\n",
    "$$\\max_{\\widetilde{x}} L (f(\\widetilde{x}),y),$$\n",
    "$$\\text{s.t.}\\;\\; d(x,\\widetilde{x}) = ||\\phi(x) - \\phi (\\tilde{x}) ||_{2} \\leq \\epsilon$$\n",
    "Here $$L (f({x}),y) = \\max_{i\\neq y} (z_i(x) - z_y(x) ),$$\n",
    "where $z_i(x)$ is the $i$-th logit output of $f(x)$, and $\\phi(\\cdot)$ is a function that maps the input $x$ to  normalized, flattened activations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08dfdd50",
   "metadata": {},
   "source": [
    "## Modules Importing\n",
    "Import all necessary modules and add PyGRANSO src folder to system path. \n",
    "\n",
    "NOTE: the perceptual advex package (https://github.com/cassidylaidlaw/perceptual-advex.git) is required to calculate the distance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23c19f28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# install required package\n",
    "try:\n",
    "    import perceptual_advex\n",
    "except ImportError:\n",
    "    !pip install perceptual-advex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90ed32f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import sys\n",
    "from pygranso.pygranso import pygranso\n",
    "from pygranso.pygransoStruct import pygransoStruct\n",
    "from pygranso.private.getNvar import getNvarTorch\n",
    "from perceptual_advex.utilities import get_dataset_model\n",
    "from perceptual_advex.perceptual_attacks import get_lpips_model\n",
    "from perceptual_advex.distances import normalize_flatten_features\n",
    "import gc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d0c82d9",
   "metadata": {},
   "source": [
    "## Download Pretrained Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "beedb704",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "# Download ResNet model\n",
    "if not os.path.exists('data/checkpoints/cifar_pgd_l2_1.pt'):\n",
    "    !mkdir -p data/checkpoints\n",
    "    !curl -o data/checkpoints/cifar_pgd_l2_1.pt https://perceptual-advex.s3.us-east-2.amazonaws.com/cifar_pgd_l2_1_cpu.pt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17a1b7fe",
   "metadata": {},
   "source": [
    "## Data Initialization \n",
    "\n",
    "Specify torch device, neural network architecture, and generate data.\n",
    "\n",
    "NOTE: please specify path for downloading data.\n",
    "\n",
    "Use GPU for this problem. If no cuda device available, please set *device = torch.device('cpu')*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8b4842e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=> loading checkpoint 'data/checkpoints/cifar_pgd_l2_1.pt'\n",
      "==> Preparing dataset cifar..\n",
      "Files already downloaded and verified\n"
     ]
    }
   ],
   "source": [
    "device = torch.device('cuda')\n",
    "\n",
    "dataset, model = get_dataset_model(\n",
    "dataset='cifar',\n",
    "arch='resnet50',\n",
    "checkpoint_fname='data/checkpoints/cifar_pgd_l2_1.pt',\n",
    ")\n",
    "model = model.to(device=device, dtype=torch.double)\n",
    "# Create a validation set loader.\n",
    "batch_size = 1\n",
    "_, val_loader = dataset.make_loaders(1, batch_size, only_val=True, shuffle_val=False)\n",
    "\n",
    "inputs, labels = next(iter(val_loader))\n",
    "\n",
    "# All the user-provided data (vector/matrix/tensor) must be in torch tensor format. \n",
    "# As PyTorch tensor is single precision by default, one must explicitly set `dtype=torch.double`.\n",
    "# Also, please make sure the device of provided torch tensor is the same as opts.torch_device.\n",
    "inputs = inputs.to(device=device, dtype=torch.double)\n",
    "labels = labels.to(device=device)\n",
    "\n",
    "# externally-bounded attack: AlexNet for constraint while ResNet for objective\n",
    "lpips_model = get_lpips_model('alexnet_cifar', model).to(device=device, dtype=torch.double)\n",
    "\n",
    "# Don't reccoment use in the current version. self-bounded attack: AlexNet for both constraint and objective\n",
    "# model = get_lpips_model('alexnet_cifar', model).to(device=device, dtype=torch.double)\n",
    "\n",
    "# attack_type = 'L_2'\n",
    "# attack_type = 'L_inf'\n",
    "attack_type = 'Perceptual'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec80716b",
   "metadata": {},
   "source": [
    "## Function Set-Up\n",
    "\n",
    "Encode the optimization variables, and objective and constraint functions.\n",
    "\n",
    "Note: please strictly follow the format of comb_fn, which will be used in the PyGRANSO main algortihm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fb360e75",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variables and corresponding dimensions.\n",
    "var_in = {\"x_tilde\": list(inputs.shape)}\n",
    "\n",
    "def MarginLoss(logits,labels):\n",
    "    correct_logits = torch.gather(logits, 1, labels.view(-1, 1))\n",
    "    max_2_logits, argmax_2_logits = torch.topk(logits, 2, dim=1)\n",
    "    top_max, second_max = max_2_logits.chunk(2, dim=1)\n",
    "    top_argmax, _ = argmax_2_logits.chunk(2, dim=1)\n",
    "    labels_eq_max = top_argmax.squeeze().eq(labels).float().view(-1, 1)\n",
    "    labels_ne_max = top_argmax.squeeze().ne(labels).float().view(-1, 1)\n",
    "    max_incorrect_logits = labels_eq_max * second_max + labels_ne_max * top_max\n",
    "    loss = -(max_incorrect_logits - correct_logits).clamp(max=1).squeeze().sum()\n",
    "    return loss\n",
    "\n",
    "def user_fn(X_struct,inputs,labels,lpips_model,model):\n",
    "    adv_inputs = X_struct.x_tilde\n",
    "    \n",
    "    # objective function\n",
    "    # 8/255 for L_inf, 1 for L_2, 0.5 for PPGD/LPA\n",
    "    if attack_type == 'L_2':\n",
    "        epsilon = 1\n",
    "    elif attack_type == 'L_inf':\n",
    "        epsilon = 8/255\n",
    "    else:\n",
    "        epsilon = 0.5\n",
    "\n",
    "    logits_outputs = model(adv_inputs)\n",
    "\n",
    "    f = MarginLoss(logits_outputs,labels)\n",
    "\n",
    "    # inequality constraint\n",
    "    ci = pygransoStruct()\n",
    "    if attack_type == 'L_2':\n",
    "        ci.c1 = torch.norm((inputs - adv_inputs).reshape(inputs.size()[0], -1)) - epsilon\n",
    "    elif attack_type == 'L_inf':\n",
    "        # ci.c1 = torch.norm((inputs - adv_inputs).reshape(inputs.size()[0], -1), float('inf')) - epsilon\n",
    "        linf_distance = torch.amax(torch.abs(inputs-adv_inputs).reshape(inputs.size()[0], -1))\n",
    "        ci.c1 = linf_distance - epsilon\n",
    "    else:\n",
    "        input_features = normalize_flatten_features( lpips_model.features(inputs)).detach()\n",
    "        adv_features = lpips_model.features(adv_inputs)\n",
    "        adv_features = normalize_flatten_features(adv_features)\n",
    "        lpips_dists = (adv_features - input_features).norm(dim=1)\n",
    "        ci.c1 = lpips_dists - epsilon\n",
    "    \n",
    "    # equality constraint \n",
    "    ce = None\n",
    "\n",
    "    return [f,ci,ce]\n",
    "\n",
    "comb_fn = lambda X_struct : user_fn(X_struct,inputs,labels,lpips_model,model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0f55ace",
   "metadata": {},
   "source": [
    "## User Options\n",
    "Specify user-defined options for PyGRANSO "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f3a65b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "opts = pygransoStruct()\n",
    "opts.torch_device = device\n",
    "opts.maxit = 100\n",
    "opts.opt_tol = 1e-6\n",
    "opts.print_frequency = 1\n",
    "opts.x0 = torch.reshape(inputs,(torch.numel(inputs),1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bca18c7",
   "metadata": {},
   "source": [
    "## Main Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "632976b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/buyun/anaconda3/envs/cuosqp_pygranso/lib/python3.9/site-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /opt/conda/conda-bld/pytorch_1623448255797/work/c10/core/TensorImpl.h:1156.)\n",
      "  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: A PyTorch-enabled port of GRANSO with auto-differentiation                                             ║ \n",
      "Version 1.2.0                                                                                                    ║ \n",
      "Licensed under the AGPLv3, Copyright (C) 2021-2022 Tim Mitchell and Buyun Liang                                  ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   3072                                                                     ║ \n",
      " # of inequality constraints        :      1                                                                     ║ \n",
      " # of equality constraints          :      0                                                                     ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  0.50909392739 ║  0.50909392739 ║ 0.000000 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 0.752374   ║ \n",
      "   1 ║ 1.000000 │  0.13139580076 ║  0.13139580076 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.569790   ║ \n",
      "   2 ║ 1.000000 │ -0.01353464659 ║ -0.11231957917 ║ 0.098785 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.364019   ║ \n",
      "   3 ║ 1.000000 │ -0.03305865013 ║ -0.23057790915 ║ 0.197519 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.391431   ║ \n",
      "   4 ║ 1.000000 │ -0.07512002132 ║ -0.36057738209 ║ 0.285457 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.436613   ║ \n",
      "   5 ║ 1.000000 │ -0.11627463660 ║ -0.49942430204 ║ 0.383150 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.349554   ║ \n",
      "   6 ║ 1.000000 │ -0.17664891011 ║ -0.58140452016 ║ 0.404756 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.484603   ║ \n",
      "   7 ║ 1.000000 │ -0.29911013557 ║ -0.68329983929 ║ 0.384190 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.357295   ║ \n",
      "   8 ║ 1.000000 │ -0.35472121343 ║ -0.75604941979 ║ 0.401328 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.760431   ║ \n",
      "   9 ║ 1.000000 │ -0.46871129466 ║ -0.80585740448 ║ 0.337146 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 1.010051   ║ \n",
      "  10 ║ 1.000000 │ -0.50872108700 ║ -0.88639971711 ║ 0.377679 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.548706   ║ \n",
      "  11 ║ 1.000000 │ -0.62616245130 ║ -0.88869577749 ║ 0.262533 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.638738   ║ \n",
      "  12 ║ 1.000000 │ -0.64267769247 ║ -0.93742006917 ║ 0.294742 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.870128   ║ \n",
      "  13 ║ 1.000000 │ -0.74731841034 ║ -0.98236757218 ║ 0.235049 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.606221   ║ \n",
      "  14 ║ 1.000000 │ -0.79218506008 ║ -1.00000000000 ║ 0.207815 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.514724   ║ \n",
      "  15 ║ 1.000000 │ -0.83822978425 ║ -1.00000000000 ║ 0.161770 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.260043   ║ \n",
      "  16 ║ 1.000000 │ -0.85468479749 ║ -0.94460724778 ║ 0.089922 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 1.303794   ║ \n",
      "  17 ║ 1.000000 │ -0.91321142003 ║ -0.99960270319 ║ 0.086391 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.601452   ║ \n",
      "  18 ║ 1.000000 │ -0.92405471150 ║ -1.00000000000 ║ 0.075945 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.292231   ║ \n",
      "  19 ║ 1.000000 │ -0.95860778204 ║ -1.00000000000 ║ 0.041392 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.106619   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "  20 ║ 1.000000 │ -0.97443979631 ║ -0.98763548475 ║ 0.013196 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 1.048798   ║ \n",
      "  21 ║ 1.000000 │ -0.98244681692 ║ -1.00000000000 ║ 0.017553 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.052289   ║ \n",
      "  22 ║ 1.000000 │ -0.99989348389 ║ -0.99989348389 ║ 0.000000 │   -  ║ S  │     2 │ 2.000000 ║     1 │ 0.409106   ║ \n",
      "  23 ║ 1.000000 │ -1.00000000000 ║ -1.00000000000 ║ 0.000000 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.000000   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Optimization results:                                                                                            ║ \n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║ -1.00000000000 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║ -1.00000000000 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║ -1.00000000000 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              23                                                                                      ║ \n",
      "Function evaluations:    34                                                                                      ║ \n",
      "PyGRANSO termination code: 0 --- converged to stationarity and feasibility tolerances.                           ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 4.42449164390564s\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dc1ca84",
   "metadata": {},
   "source": [
    "## Batch Attacks\n",
    "\n",
    "Apply attacks to multiple images by repeating above steps and calculate the success rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "49584c22",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[W pthreadpool-cpp.cc:90] Warning: Leaking Caffe2 thread-pool after fork. (function pthreadpool)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "attack image # 0\n",
      "attack image # 8\n",
      "attack image # 11\n",
      "attack image # 14\n",
      "attack image # 18\n",
      "attack image # 23\n",
      "attack image # 28\n",
      "attack image # 34\n",
      "attack image # 38\n",
      "attack image # 42\n",
      "attack image # 45\n",
      "attack image # 46\n",
      "\n",
      "\n",
      "\n",
      "Model train acc on the original image = 0.24\n",
      "Success rate of attack = 1.0\n",
      "Average distance between attacked image and original image = 0.4919106732232837\n",
      "Average run time of PyGRANSO = 3.276595413684845s, mean f_eval = 29.666666666666668 iters\n"
     ]
    }
   ],
   "source": [
    "total_count = 50\n",
    "total_diff = 0\n",
    "original_count = 0\n",
    "attack_count = 0\n",
    "total_time = 0\n",
    "total_iterations = 0  \n",
    "i = 0\n",
    "it = iter(val_loader)\n",
    "\n",
    "for i in range(total_count):\n",
    "    # Get a batch from the validation set.\n",
    "    inputs, labels = next(it)\n",
    "    inputs = inputs.to(device=device, dtype=torch.double)\n",
    "    labels = labels.to(device=device)\n",
    "\n",
    "    # variables and corresponding dimensions.\n",
    "    var_in = {\"x_tilde\": list(inputs.shape)}\n",
    "\n",
    "    opts.x0 = torch.reshape(inputs,(torch.numel(inputs),1))\n",
    "    # suppress output\n",
    "    opts.print_level = 0\n",
    "\n",
    "    pred_labels = model(inputs).argmax(1)\n",
    "    if pred_labels == labels:\n",
    "        original_count += 1\n",
    "    else:\n",
    "        continue\n",
    "    \n",
    "    start = time.time()\n",
    "    soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "    end = time.time()\n",
    "    \n",
    "    # Garbage Collector\n",
    "    gc.collect()\n",
    "    \n",
    "    print(\"attack image # %d\"%i)\n",
    "    \n",
    "    total_time += end - start\n",
    "    total_iterations += soln.fn_evals\n",
    "\n",
    "    final_adv_input = torch.reshape(soln.final.x,inputs.shape)\n",
    "    pred_labels2 = model(final_adv_input.to(device=device, dtype=torch.double)).argmax(1)\n",
    "\n",
    "    if pred_labels2 == labels:\n",
    "        attack_count += 1\n",
    "        \n",
    "    if attack_type == 'L_2':\n",
    "            diff = torch.norm((inputs.to(device=device, dtype=torch.double) - final_adv_input).reshape(inputs.size()[0], -1))\n",
    "    elif attack_type == 'L_inf':\n",
    "        diff = ( torch.norm((inputs.to(device=device, dtype=torch.double) - final_adv_input).reshape(inputs.size()[0], -1), float('inf') ) )\n",
    "    else:\n",
    "        input_features = normalize_flatten_features( lpips_model.features(inputs)).detach()\n",
    "        adv_features = lpips_model.features(final_adv_input)\n",
    "        adv_features = normalize_flatten_features(adv_features)\n",
    "        lpips_dists = torch.mean((adv_features - input_features).norm(dim=1))\n",
    "        diff = lpips_dists\n",
    "\n",
    "    total_diff += diff\n",
    "\n",
    "print(\"\\n\\n\\nModel train acc on the original image = {}\".format(( original_count/total_count )))\n",
    "print(\"Success rate of attack = {}\".format( (original_count-attack_count)/original_count ))\n",
    "print(\"Average distance between attacked image and original image = {}\".format(total_diff/original_count))\n",
    "print(\"Average run time of PyGRANSO = {}s, mean f_eval = {} iters\".format(total_time/original_count,total_iterations/original_count))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04f2eee2",
   "metadata": {},
   "source": [
    "## ImageNet Datasets\n",
    "\n",
    "*(Optional)* Perceptual Attack on ImageNet datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3132a4d",
   "metadata": {},
   "source": [
    "### Modules Importing\n",
    "\n",
    "Import all necessary modules and add PyGRANSO src folder to system path.\n",
    "\n",
    "NOTE: the perceptual advex package (https://github.com/cassidylaidlaw/perceptual-advex.git) is required to calculate the distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "375a30d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import sys\n",
    "## Adding PyGRANSO directories. Should be modified by user\n",
    "sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')\n",
    "from pygranso.pygranso import pygranso\n",
    "from pygranso.pygransoStruct import pygransoStruct\n",
    "from perceptual_advex.distances import normalize_flatten_features\n",
    "from torchvision import transforms\n",
    "from torchvision import datasets\n",
    "import torch.nn as nn\n",
    "from torchvision.models import resnet50\n",
    "import os\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dbb0e2c",
   "metadata": {},
   "source": [
    "### Model Initialization\n",
    "Specify torch device, neural network architecture.\n",
    "\n",
    "NOTE: please specify path for downloading data.\n",
    "\n",
    "Use GPU for this problem. If no cuda device available, please set device = torch.device('cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "72da75de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Use pytorch pretrained weights: [False]\n"
     ]
    }
   ],
   "source": [
    "device = torch.device('cuda')\n",
    "\n",
    "class ResNet_orig_LPIPS(nn.Module):\n",
    "    def __init__(self, num_classes, pretrained=False):\n",
    "        super().__init__()\n",
    "        pretrained = bool(pretrained)\n",
    "        print(\"Use pytorch pretrained weights: [{}]\".format(pretrained))\n",
    "        self.back = resnet50(pretrained=pretrained)\n",
    "        self.back.fc = nn.Linear(2048, \n",
    "                                 num_classes)\n",
    "        # ===== Truncate the back and append the model to enable attack models\n",
    "        model_list = list(self.back.children())\n",
    "        self.head = nn.Sequential(\n",
    "            *model_list[0:4]\n",
    "        )\n",
    "        self.layer1 = model_list[4]\n",
    "        self.layer2 = model_list[5]\n",
    "        self.layer3 = model_list[6]\n",
    "        self.layer4 = model_list[7]\n",
    "        self.tail = nn.Sequential(\n",
    "            *[model_list[8],\n",
    "              nn.Flatten(),\n",
    "              model_list[9]]\n",
    "            )    \n",
    "        # print()    \n",
    "\n",
    "    def features(self, x):\n",
    "        \"\"\"\n",
    "            This function is called to produce perceptual features.\n",
    "            Output ==> has to be a tuple of conv features.\n",
    "        \"\"\"\n",
    "        x = x.type(self.back.fc.weight.dtype)\n",
    "        x = self.head(x)\n",
    "        x_layer1 = self.layer1(x)\n",
    "        x_layer2 = self.layer2(x_layer1)\n",
    "        x_layer3 = self.layer3(x_layer2)\n",
    "        x_layer4 = self.layer4(x_layer3)\n",
    "        return x_layer1, x_layer2, x_layer3, x_layer4\n",
    "    \n",
    "    def classifier(self, last_layer):\n",
    "        last_layer = self.tail(last_layer)\n",
    "        return last_layer\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.classifier(self.features(x)[-1])\n",
    "    \n",
    "    def features_logits(self, x):\n",
    "        features = self.features(x)\n",
    "        logits = self.classifier(features[-1])\n",
    "        return features, logits\n",
    "\n",
    "base_model = ResNet_orig_LPIPS(num_classes=100,pretrained=False).to(device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4bd2e18",
   "metadata": {},
   "source": [
    "### Download Pretrained Model\n",
    "please download our pretrained model from the Google Drive [https://drive.google.com/file/d/1TZoKfVrqLgwKLa5-Y69uVOYb1xtOp8ty/view?usp=sharing] and add it to the \"data/checkpoints/\" path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b4b4c7e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "# Download Pretrained model\n",
    "if not os.path.exists('data/checkpoints/checkpoint.pth'):\n",
    "    !mkdir -p data/checkpoints\n",
    "        \n",
    "pretrained_path = os.path.join(\"data/checkpoints/\",\"checkpoint.pth\")\n",
    "state_dict = torch.load(pretrained_path)[\"model_state_dict\"]\n",
    "base_model.load_state_dict(state_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23c8c70b",
   "metadata": {},
   "source": [
    "### Data Initialization\n",
    "Download ImageNet 2012 validation data from [https://www.image-net.org/download.php], and put it under the directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8a17c9a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The ImageNet dataset is no longer publicly accessible. \n",
    "# You need to download the archives externally and place them in the root directory\n",
    "valset = datasets.ImageNet('/home/buyun/Documents/datasets/ImageNet/', split='val', transform=transforms.Compose([transforms.CenterCrop(224),transforms.ToTensor()]))\n",
    "val_loader = torch.utils.data.DataLoader(valset, batch_size=1,shuffle=False, num_workers=0, collate_fn=None, pin_memory=False,)\n",
    "\n",
    "# inputs, labels = next(iter(val_loader))\n",
    "\n",
    "i=0\n",
    "for inputs, labels in val_loader:\n",
    "    i+=1\n",
    "    if i > 2:\n",
    "        break\n",
    "\n",
    "# All the user-provided data (vector/matrix/tensor) must be in torch tensor format.\n",
    "# As PyTorch tensor is single precision by default, one must explicitly set `dtype=torch.double`.\n",
    "# Also, please make sure the device of provided torch tensor is the same as opts.torch_device.\n",
    "inputs = inputs.to(device=device, dtype=torch.double)\n",
    "labels = labels.to(device=device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "336a71da",
   "metadata": {},
   "source": [
    "### Function Set-Up\n",
    "Encode the optimization variables, and objective and constraint functions.\n",
    "\n",
    "Note: please strictly follow the format of comb_fn, which will be used in the PyGRANSO main algortihm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "90d5ed77",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variables and corresponding dimensions.\n",
    "var_in = {\"x_tilde\": list(inputs.shape)}\n",
    "\n",
    "def MarginLoss(logits,labels):\n",
    "    correct_logits = torch.gather(logits, 1, labels.view(-1, 1))\n",
    "    max_2_logits, argmax_2_logits = torch.topk(logits, 2, dim=1)\n",
    "    top_max, second_max = max_2_logits.chunk(2, dim=1)\n",
    "    top_argmax, _ = argmax_2_logits.chunk(2, dim=1)\n",
    "    labels_eq_max = top_argmax.squeeze().eq(labels).float().view(-1, 1)\n",
    "    labels_ne_max = top_argmax.squeeze().ne(labels).float().view(-1, 1)\n",
    "    max_incorrect_logits = labels_eq_max * second_max + labels_ne_max * top_max\n",
    "    loss = -(max_incorrect_logits - correct_logits).clamp(max=1).squeeze().sum()\n",
    "    return loss\n",
    "\n",
    "def user_fn(X_struct, inputs, labels, lpips_model, model, attack_type, eps=0.5):\n",
    "    adv_inputs = X_struct.x_tilde\n",
    "    epsilon = eps\n",
    "    logits_outputs = model(adv_inputs)\n",
    "    f = -torch.nn.functional.cross_entropy(logits_outputs,labels)\n",
    "\n",
    "    # inequality constraint\n",
    "    ci = pygransoStruct()\n",
    "    if attack_type == 'L_2':\n",
    "        ci.c1 = torch.norm((inputs - adv_inputs).reshape(inputs.size()[0], -1)) - epsilon\n",
    "    elif attack_type == 'L_inf':\n",
    "        ci.c1 = torch.norm((inputs - adv_inputs).reshape(inputs.size()[0], -1), float('inf')) - epsilon\n",
    "    else:\n",
    "        input_features = normalize_flatten_features( lpips_model.features(inputs)).detach()\n",
    "        adv_features = lpips_model.features(adv_inputs)\n",
    "        adv_features = normalize_flatten_features(adv_features)\n",
    "        lpips_dists = (adv_features - input_features).norm(dim=1)\n",
    "        ci.c1 = lpips_dists - epsilon\n",
    "\n",
    "    # equality constraint\n",
    "    ce = None\n",
    "    return [f,ci,ce]\n",
    "\n",
    "attack_type = \"Perceptual\"\n",
    "var_in = {\"x_tilde\": list(inputs.shape)}\n",
    "\n",
    "comb_fn = lambda X_struct : user_fn(X_struct, inputs, labels, lpips_model=base_model, model=base_model, attack_type=attack_type, eps=0.25)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd23824e",
   "metadata": {},
   "source": [
    "### User Options\n",
    "Specify user-defined options for PyGRANSO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "aa6ecb07",
   "metadata": {},
   "outputs": [],
   "source": [
    "opts = pygransoStruct()\n",
    "opts.torch_device = device\n",
    "opts.maxit = 50\n",
    "opts.opt_tol = 1e-4\n",
    "opts.viol_ineq_tol = 1e-4\n",
    "\n",
    "opts.print_frequency = 1\n",
    "opts.limited_mem_size = 100\n",
    "opts.x0 = torch.reshape(inputs,(torch.numel(inputs),1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cffa6874",
   "metadata": {},
   "source": [
    "### Main Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7c01cb23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: A PyTorch-enabled port of GRANSO with auto-differentiation                                             ║ \n",
      "Version 1.2.0                                                                                                    ║ \n",
      "Licensed under the AGPLv3, Copyright (C) 2021-2022 Tim Mitchell and Buyun Liang                                  ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   150528                                                                   ║ \n",
      " # of inequality constraints        :        1                                                                   ║ \n",
      " # of equality constraints          :        0                                                                   ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "\u001b[33mLimited-memory mode enabled with size = 100.                                                                    \u001b[0m ║ \n",
      "\u001b[33mNOTE: limited-memory mode is generally NOT                                                                      \u001b[0m ║ \n",
      "\u001b[33mrecommended for nonsmooth problems.                                                                             \u001b[0m ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │ -4.80460453033 ║ -4.80460453033 ║ 0.000000 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 0.057810   ║ \n",
      "   1 ║ 1.000000 │ -5.02289479971 ║ -5.09825992584 ║ 0.075365 │   -  ║ S  │     8 │ 128.0000 ║     1 │ 0.069029   ║ \n",
      "   2 ║ 1.000000 │ -5.10925549269 ║ -5.18944549561 ║ 0.080190 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 2.254751   ║ \n",
      "   3 ║ 0.900000 │ -4.65091111660 ║ -5.25790309906 ║ 0.081202 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 1.695234   ║ \n",
      "   4 ║ 0.810000 │ -4.21319317818 ║ -5.29190301895 ║ 0.073248 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 1.512381   ║ \n",
      "   5 ║ 0.590490 │ -3.06710324050 ║ -5.29687261581 ║ 0.060647 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.932238   ║ \n",
      "   6 ║ 0.590490 │ -3.07930869722 ║ -5.28442907333 ║ 0.041094 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.904220   ║ \n",
      "   7 ║ 0.590490 │ -3.08841750957 ║ -5.28511905670 ║ 0.032392 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.831985   ║ \n",
      "   8 ║ 0.531441 │ -2.78312443927 ║ -5.27871608734 ║ 0.022202 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.623665   ║ \n",
      "   9 ║ 0.531441 │ -2.78690596156 ║ -5.26503705978 ║ 0.011151 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.929759   ║ \n",
      "  10 ║ 0.531441 │ -2.79094288046 ║ -5.25895500183 ║ 0.003881 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.726329   ║ \n",
      "  11 ║ 0.531441 │ -2.79302624641 ║ -5.26093053818 ║ 0.002848 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.611975   ║ \n",
      "  12 ║ 0.478297 │ -2.51575888146 ║ -5.26117897034 ║ 6.47e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.404779   ║ \n",
      "  13 ║ 0.478297 │ -2.51828077292 ║ -5.26922082901 ║ 0.001971 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.717285   ║ \n",
      "  14 ║ 0.478297 │ -2.51884803812 ║ -5.27119922638 ║ 0.002350 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.561274   ║ \n",
      "  15 ║ 0.478297 │ -2.52117244546 ║ -5.27238130569 ║ 5.91e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.318952   ║ \n",
      "  16 ║ 0.478297 │ -2.52232422627 ║ -5.27522468567 ║ 7.99e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.394124   ║ \n",
      "  17 ║ 0.478297 │ -2.52279316174 ║ -5.27518367767 ║ 3.11e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.485237   ║ \n",
      "  18 ║ 0.478297 │ -2.52446515667 ║ -5.27893543243 ║ 4.33e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.479674   ║ \n",
      "  19 ║ 0.478297 │ -2.52521934753 ║ -5.28059911728 ║ 4.75e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.433353   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "  20 ║ 0.478297 │ -2.52577730135 ║ -5.28149604797 ║ 3.46e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.437327   ║ \n",
      "  21 ║ 0.478297 │ -2.52585955834 ║ -5.28192710876 ║ 4.70e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.619227   ║ \n",
      "  22 ║ 0.478297 │ -2.52684173690 ║ -5.28387641907 ║ 4.20e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.404286   ║ \n",
      "  23 ║ 0.478297 │ -2.52786196030 ║ -5.28576040268 ║ 3.01e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.585493   ║ \n",
      "  24 ║ 0.478297 │ -2.52829332211 ║ -5.28667068481 ║ 3.05e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.451248   ║ \n",
      "  25 ║ 0.478297 │ -2.52834003932 ║ -5.28739356995 ║ 6.04e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.508800   ║ \n",
      "  26 ║ 0.478297 │ -2.52913654948 ║ -5.28833770752 ║ 2.59e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.434622   ║ \n",
      "  27 ║ 0.478297 │ -2.52962843256 ║ -5.28937053680 ║ 2.61e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.269708   ║ \n",
      "  28 ║ 0.478297 │ -2.52988955443 ║ -5.28977727890 ║ 1.95e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.346074   ║ \n",
      "  29 ║ 0.478297 │ -2.52998095904 ║ -5.28998184204 ║ 2.01e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.639614   ║ \n",
      "  30 ║ 0.478297 │ -2.53037783068 ║ -5.29100513458 ║ 2.94e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.423074   ║ \n",
      "  31 ║ 0.478297 │ -2.53091641537 ║ -5.29268741608 ║ 5.60e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.509262   ║ \n",
      "  32 ║ 0.478297 │ -2.53138594858 ║ -5.29287290573 ║ 1.79e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.330391   ║ \n",
      "  33 ║ 0.478297 │ -2.53160232432 ║ -5.29328298569 ║ 1.59e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.296537   ║ \n",
      "  34 ║ 0.478297 │ -2.53175091377 ║ -5.29350566864 ║ 1.16e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.293898   ║ \n",
      "  35 ║ 0.478297 │ -2.53191857862 ║ -5.29381752014 ║ 9.79e-05 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.273829   ║ \n",
      "  36 ║ 0.478297 │ -2.53200210902 ║ -5.29413223267 ║ 1.65e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.375656   ║ \n",
      "  37 ║ 0.478297 │ -2.53222144606 ║ -5.29448413849 ║ 1.14e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.445341   ║ \n",
      "  38 ║ 0.478297 │ -2.53238578453 ║ -5.29486274719 ║ 1.31e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.385892   ║ \n",
      "  39 ║ 0.478297 │ -2.53239073039 ║ -5.29514980316 ║ 2.63e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.471347   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "  40 ║ 0.478297 │ -2.53296333971 ║ -5.29616928101 ║ 1.78e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.313041   ║ \n",
      "  41 ║ 0.478297 │ -2.53312678353 ║ -5.29663991928 ║ 2.40e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.435326   ║ \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  42 ║ 0.430467 │ -2.28013898502 ║ -5.29768085480 ║ 3.39e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.397319   ║ \n",
      "  43 ║ 0.430467 │ -2.28024609279 ║ -5.29762601852 ║ 2.08e-04 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.323241   ║ \n",
      "  44 ║ 0.430467 │ -2.28044597618 ║ -5.29789733887 ║ 1.25e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.235920   ║ \n",
      "  45 ║ 0.430467 │ -2.28060165943 ║ -5.29813098907 ║ 7.00e-05 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.348329   ║ \n",
      "  46 ║ 0.430467 │ -2.28078929003 ║ -5.29859781265 ║ 8.33e-05 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.307751   ║ \n",
      "  47 ║ 0.430467 │ -2.28099150593 ║ -5.29904174805 ║ 7.22e-05 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.280139   ║ \n",
      "  48 ║ 0.430467 │ -2.28100859374 ║ -5.29910373688 ║ 8.18e-05 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.304666   ║ \n",
      "  49 ║ 0.430467 │ -2.28118402230 ║ -5.29971647263 ║ 1.70e-04 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.280201   ║ \n",
      "  50 ║ 0.430467 │ -2.28143626977 ║ -5.30004692078 ║ 6.01e-05 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.217794   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Optimization results:                                                                                            ║ \n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║ -5.30004692078 ║ 6.01e-05 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║ -5.30004692078 ║ 6.01e-05 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║ -4.98127365112 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              50                                                                                      ║ \n",
      "Function evaluations:    68                                                                                      ║ \n",
      "PyGRANSO termination code: 4 --- max iterations reached.                                                         ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 7.217053413391113s\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ba71567",
   "metadata": {},
   "source": [
    "### Results Visualization\n",
    "Visualize the original image and the perceptual attacked image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4b85c0f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/buyun/anaconda3/envs/cuosqp_pygranso/lib/python3.9/site-packages/torch/nn/functional.py:3609: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def rescale_array(array):\n",
    "    ele_min, ele_max = np.amin(array), np.amax(array)\n",
    "    array = (array - ele_min) / (ele_max - ele_min)\n",
    "    return array\n",
    "\n",
    "def tensor2img(tensor):\n",
    "    tensor = torch.nn.functional.interpolate(\n",
    "        tensor,\n",
    "        scale_factor=3,\n",
    "        mode=\"bilinear\"\n",
    "    )\n",
    "    array = tensor.detach().cpu().numpy()[0, :, :, :]\n",
    "    array = np.transpose(array, [1, 2, 0])\n",
    "    return array\n",
    "\n",
    "final_adv_input = torch.reshape(soln.final.x,inputs.shape)\n",
    "\n",
    "ori_image = rescale_array(tensor2img(inputs))\n",
    "adv_image = rescale_array(tensor2img(final_adv_input))\n",
    "\n",
    "f = plt.figure()\n",
    "f.add_subplot(1,2,1)\n",
    "plt.imshow(ori_image)\n",
    "plt.title('Original Image')\n",
    "plt.axis('off')\n",
    "f.add_subplot(1,2,2)\n",
    "plt.imshow(adv_image)\n",
    "plt.title('Adversarial Attacked Image')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
