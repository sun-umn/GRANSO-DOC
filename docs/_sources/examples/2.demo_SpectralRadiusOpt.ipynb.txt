{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5257bb27",
   "metadata": {},
   "source": [
    "# Spectral Radius Optimization\n",
    "\n",
    "This notebook contains examples of how to solve Spectral Radius Optimization problem.\n",
    "\n",
    "Reference: Curtis, Frank E., Tim Mitchell, and Michael L. Overton. \"A BFGS-SQP method for nonsmooth, nonconvex, constrained optimization and its evaluation using relative minimization profiles.\" Optimization Methods and Software 32.1 (2017): 148-181."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16ae1959",
   "metadata": {},
   "source": [
    "## Problem Description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72e3a77a",
   "metadata": {},
   "source": [
    "We have $M=A+BXC$,\n",
    "where the matirces $A\\in R^{N,N},B\\in R^{N,P}$ and $C\\in R^{M,N}$ are given, $X\\in R^{P,M}$ is the matrix form optimization variable.\n",
    "\n",
    "We have the nonconvex, nonsmooth, and constrained optimization problem\n",
    "$$\\min_{X}\\rho_I(A+BXC),$$\n",
    "$$\\text{s.t. }\\rho_R(A+BXC)+\\xi \\leq 0,$$\n",
    "where $\\xi$ is the stability margin, and $\\rho_I$ and $\\rho_R$ are the maximum imaginary and real part of singular values of $M$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08dfdd50",
   "metadata": {},
   "source": [
    "## Modules Importing\n",
    "Import all necessary modules and add PyGRANSO src folder to system path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "90ed32f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import os,sys\n",
    "## Adding PyGRANSO directories. Should be modified by user\n",
    "sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')\n",
    "from pygranso import pygranso\n",
    "from pygransoStruct import Options, Data, GeneralStruct \n",
    "import scipy.io\n",
    "from torch import linalg as LA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17a1b7fe",
   "metadata": {},
   "source": [
    "## Data Generation \n",
    "Specify torch device, and read the data from provided file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b4842e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda')\n",
    "\n",
    "# currentdir = os.path.dirname(os.path.realpath(__file__))\n",
    "file = \"/home/buyun/Documents/GitHub/PyGRANSO/examples/data/spec_radius_opt_data.mat\"\n",
    "mat = scipy.io.loadmat(file)\n",
    "mat_struct = mat['sys']\n",
    "mat_struct = mat_struct[0,0]\n",
    "A = torch.from_numpy(mat_struct['A']).to(device=device, dtype=torch.double)\n",
    "B = torch.from_numpy(mat_struct['B']).to(device=device, dtype=torch.double)\n",
    "C = torch.from_numpy(mat_struct['C']).to(device=device, dtype=torch.double)\n",
    "p = B.shape[1]\n",
    "m = C.shape[0]\n",
    "stability_margin = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec80716b",
   "metadata": {},
   "source": [
    "## Problem Definition \n",
    "Spceify optimization variables and corresponding objective and constrained function.\n",
    "\n",
    "Note: please strictly follow the format of evalObjFunction and combinedFunction, which will be used in the PyGRANSO main algortihm. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fb360e75",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variables and corresponding dimensions.\n",
    "var_in = {\"X\": [p,m] }\n",
    "\n",
    "\n",
    "def evalObjFunction(X_struct):\n",
    "    # user defined variable, matirx form. torch tensor\n",
    "    X = X_struct.X\n",
    "    X.requires_grad_(True)\n",
    "\n",
    "    # objective function\n",
    "    M           = A + B@X@C\n",
    "    [D,_]       = LA.eig(M)\n",
    "    f = torch.max(D.imag)\n",
    "    return f\n",
    "\n",
    "def combinedFunction(X_struct):\n",
    "    # user defined variable, matirx form. torch tensor\n",
    "    X = X_struct.X\n",
    "    X.requires_grad_(True)\n",
    "\n",
    "    # objective function\n",
    "    M           = A + B@X@C\n",
    "    [D,_]       = LA.eig(M)\n",
    "    f = torch.max(D.imag)\n",
    "\n",
    "    # inequality constraint, matrix form\n",
    "    ci = GeneralStruct()\n",
    "    ci.c1 = torch.max(D.real) + stability_margin\n",
    "\n",
    "    # equality constraint \n",
    "    ce = None\n",
    "    \n",
    "    return [f,ci,ce]\n",
    "\n",
    "obj_eval_fn = lambda X_struct : evalObjFunction(X_struct)\n",
    "comb_fn = lambda X_struct : combinedFunction(X_struct)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0f55ace",
   "metadata": {},
   "source": [
    "## User Options\n",
    "Specify user-defined options for PyGRANSO algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3a65b57",
   "metadata": {},
   "outputs": [],
   "source": [
    "opts = Options()\n",
    "opts.maxit = 200\n",
    "opts.x0 = torch.zeros(p*m,1).to(device=device, dtype=torch.double)\n",
    "# print for every 10 iterations. default: 1\n",
    "opts.print_frequency = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bca18c7",
   "metadata": {},
   "source": [
    "## Main Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "632976b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: Python numerical package using GRadient-based Algorithm for Non-Smooth Optimization                    ║ \n",
      "Version 1.1.0                                                                                                    ║ \n",
      "MIT License Copyright (c) 2021 SUN Group @ UMN                                                                   ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   200                                                                      ║ \n",
      " # of inequality constraints        :     1                                                                      ║ \n",
      " # of equality constraints          :     0                                                                      ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  16.2063030241 ║  13.7635444107 ║ 2.442759 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 28.28938   ║ \n",
      "  10 ║ 1.000000 │  14.3590982418 ║  12.9268454090 ║ 1.432253 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.035468   ║ \n",
      "  20 ║ 1.000000 │  13.7119743682 ║  12.6563067110 ║ 1.055668 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.039956   ║ \n",
      "  30 ║ 1.000000 │  12.9752525101 ║  12.2671269518 ║ 0.708126 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.045205   ║ \n",
      "  40 ║ 1.000000 │  12.6717866767 ║  12.0429605789 ║ 0.628826 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.031327   ║ \n",
      "  50 ║ 1.000000 │  12.3234733228 ║  11.9603814029 ║ 0.363092 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.080786   ║ \n",
      "  60 ║ 1.000000 │  12.2040665934 ║  11.8523710217 ║ 0.351696 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.054011   ║ \n",
      "  70 ║ 0.387420 │  4.75600578569 ║  11.7895043637 ║ 0.188510 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.008985   ║ \n",
      "  80 ║ 0.387420 │  4.62036224174 ║  11.8168883006 ║ 0.042258 │   -  ║ S  │     7 │ 0.015625 ║     1 │ 0.011217   ║ \n",
      "  90 ║ 0.387420 │  4.56053741671 ║  11.7241851090 ║ 0.018348 │   -  ║ S  │     7 │ 0.015625 ║     1 │ 0.006805   ║ \n",
      " 100 ║ 0.387420 │  4.52925669625 ║  11.6855631830 ║ 0.002030 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.006830   ║ \n",
      " 110 ║ 0.387420 │  4.51030518363 ║  11.6418860429 ║ 0.000000 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.009477   ║ \n",
      " 120 ║ 0.387420 │  4.49652333124 ║  11.6063126729 ║ 0.000000 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.005906   ║ \n",
      " 130 ║ 0.387420 │  4.46979783591 ║  11.5373294981 ║ 0.000000 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.005306   ║ \n",
      " 140 ║ 0.387420 │  4.43278877764 ║  11.4418026498 ║ 0.000000 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.013944   ║ \n",
      " 150 ║ 0.387420 │  4.39653691095 ║  11.3462136713 ║ 7.81e-04 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.010631   ║ \n",
      " 160 ║ 0.387420 │  4.38039884396 ║  11.3065750737 ║ 0.000000 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.001947   ║ \n",
      " 170 ║ 0.387420 │  4.36547445211 ║  11.2680526097 ║ 0.000000 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.006880   ║ \n",
      " 180 ║ 0.387420 │  4.34398952530 ║  11.2088115344 ║ 0.001466 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.004861   ║ \n",
      " 190 ║ 0.387420 │  4.32941317567 ║  11.1713778570 ║ 0.001393 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.006067   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      " 200 ║ 0.387420 │  4.30435713001 ║  11.1089730622 ║ 5.13e-04 │   -  ║ S  │    10 │ 0.001953 ║     1 │ 0.109532   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "Optimization results:                                                                                            ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  11.1089730622 ║ 5.13e-04 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  11.1325637346 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  11.1325637346 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              200                                                                                     ║ \n",
      "Function evaluations:    892                                                                                     ║ \n",
      "PyGRANSO termination code: 4 --- max iterations reached.                                                         ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 96.57247853279114s\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "soln = pygranso(combinedFunction = comb_fn, objEvalFunction = obj_eval_fn,var_dim_map = var_in, torch_device = device, user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eec4c44",
   "metadata": {},
   "source": [
    "## LBFGS \n",
    "(Optional) LBFGS and feasibility related options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f97cf86d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: Python numerical package using GRadient-based Algorithm for Non-Smooth Optimization                    ║ \n",
      "Version 1.1.0                                                                                                    ║ \n",
      "MIT License Copyright (c) 2021 SUN Group @ UMN                                                                   ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   200                                                                      ║ \n",
      " # of inequality constraints        :     1                                                                      ║ \n",
      " # of equality constraints          :     0                                                                      ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "\u001b[33mLimited-memory mode enabled with size = 40.                                                                     \u001b[0m ║ \n",
      "\u001b[33mNOTE: limited-memory mode is generally NOT                                                                      \u001b[0m ║ \n",
      "\u001b[33mrecommended for nonsmooth problems.                                                                             \u001b[0m ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  16.2063030241 ║  13.7635444107 ║ 2.442759 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 28.28938   ║ \n",
      "  10 ║ 1.000000 │  14.3591621233 ║  12.9268286638 ║ 1.432333 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.035476   ║ \n",
      "  20 ║ 1.000000 │  13.7108038845 ║  12.6560757460 ║ 1.054728 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.039916   ║ \n",
      "  30 ║ 1.000000 │  12.9780446340 ║  12.2692623391 ║ 0.708782 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.044756   ║ \n",
      "  40 ║ 1.000000 │  12.7160714753 ║  12.0996842285 ║ 0.616387 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.024272   ║ \n",
      "  50 ║ 1.000000 │  12.4427799920 ║  11.9155153316 ║ 0.527265 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 0.085197   ║ \n",
      "  60 ║ 0.810000 │  9.99447408254 ║  11.8785449304 ║ 0.372853 │   -  ║ S  │    10 │ 0.001953 ║     1 │ 0.028173   ║ \n",
      "  70 ║ 0.810000 │  9.78963962598 ║  11.7785041669 ║ 0.249051 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.013422   ║ \n",
      "  80 ║ 0.810000 │  9.70299351048 ║  11.7862793467 ║ 0.156107 │   -  ║ S  │     6 │ 0.031250 ║     1 │ 6.592613   ║ \n",
      "  90 ║ 0.810000 │  9.63675047607 ║  11.7227499134 ║ 0.141323 │   -  ║ S  │    12 │ 4.88e-04 ║     1 │ 0.433966   ║ \n",
      " 100 ║ 0.531441 │  6.29965762500 ║  11.6954773073 ║ 0.084201 │   -  ║ S  │    11 │ 9.77e-04 ║     1 │ 1.968356   ║ \n",
      " 110 ║ 0.478297 │  5.64917953098 ║  11.6609640533 ║ 0.071777 │   -  ║ S  │     8 │ 0.007812 ║     1 │ 1.436455   ║ \n",
      " 120 ║ 0.166772 │  1.94534805750 ║  11.6647290444 ║ 0.000000 │   -  ║ S  │     9 │ 0.003906 ║     1 │ 0.457335   ║ \n",
      " 130 ║ 0.166772 │  1.94065049882 ║  11.6365614633 ║ 0.000000 │   -  ║ S  │    12 │ 4.88e-04 ║     1 │ 0.666978   ║ \n",
      " 140 ║ 0.038152 │  0.44342688260 ║  11.6226250064 ║ 0.000000 │   -  ║ S  │     9 │ 0.011719 ║     1 │ 0.097057   ║ \n",
      " 150 ║ 0.038152 │  0.44261650916 ║  11.6013843759 ║ 0.000000 │   -  ║ S  │     8 │ 0.007812 ║     1 │ 0.331652   ║ \n",
      " 160 ║ 0.038152 │  0.44218891824 ║  11.5901768261 ║ 0.000000 │   -  ║ S  │    13 │ 7.32e-04 ║     1 │ 0.832733   ║ \n",
      " 170 ║ 0.038152 │  0.44199903005 ║  11.5851255647 ║ 2.83e-06 │   -  ║ S  │     8 │ 0.007812 ║     1 │ 0.058036   ║ \n",
      " 180 ║ 0.013303 │  0.15408494652 ║  11.5817091957 ║ 1.58e-05 │   -  ║ S  │    24 │ 1.28e-05 ║     1 │ 0.091381   ║ \n",
      " 190 ║ 2.18e-04 │  0.00252951621 ║  11.5780844026 ║ 0.000000 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.001044   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      " 200 ║ 2.18e-04 │  0.00252782423 ║  11.5703398968 ║ 0.000000 │   -  ║ S  │     2 │ 0.500000 ║     1 │ 0.006206   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "Optimization results:                                                                                            ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  11.5703398968 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  11.5703398968 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  11.5703398968 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              200                                                                                     ║ \n",
      "Function evaluations:    1579                                                                                    ║ \n",
      "PyGRANSO termination code: 4 --- max iterations reached.                                                         ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 139.46656203269958s\n"
     ]
    }
   ],
   "source": [
    "opts = Options()\n",
    "opts.maxit = 200\n",
    "opts.x0 = torch.zeros(p*m,1).to(device=device, dtype=torch.double)\n",
    "# print for every 10 iterations. default: 1\n",
    "opts.print_frequency = 10\n",
    "\n",
    "# Limited-memory mode is generally not recommended for nonsmooth\n",
    "# problems, such as this one, but it can nonetheless enabled if\n",
    "# desired/necessary.  opts.limited_mem_size == 0 is off, that is, \n",
    "# limited-memory mode is disabled.\n",
    "# Note that this example has 200 variables.\n",
    "opts.limited_mem_size = 40\n",
    "\n",
    "start = time.time()\n",
    "soln = pygranso(combinedFunction = comb_fn, objEvalFunction = obj_eval_fn,var_dim_map = var_in, torch_device = device, user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8dff3916",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can also tune PyGRANSO to more aggressively favor satisfying\n",
    "# feasibility over minimizing the objective.  Set feasibility_bias to\n",
    "# true to adjust the following three steering parameters away from\n",
    "# their default values.  For more details on these parameters, type\n",
    "# import pygransoOptionsAdvanced\n",
    "# help(pygransoOptionsAdvanced)\n",
    "import numpy as np\n",
    "opts = Options()\n",
    "feasibility_bias = True\n",
    "if feasibility_bias:\n",
    "    opts.steering_ineq_margin = np.inf    # default is 1e-6\n",
    "    opts.steering_c_viol = 0.9         # default is 0.1\n",
    "    opts.steering_c_mu = 0.1           # default is 0.9\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3fb2e962",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\u001b[33m╔═════ QP SOLVER NOTICE ════════════════════════════════════════════════════════════════════════╗\n",
      "\u001b[0m\u001b[33m║  PyGRANSO requires a quadratic program (QP) solver that has a quadprog-compatible interface,  ║\n",
      "\u001b[0m\u001b[33m║  the default is osqp. Users may provide their own wrapper for the QP solver.                  ║\n",
      "\u001b[0m\u001b[33m║  To disable this notice, set opts.quadprog_info_msg = False                                   ║\n",
      "\u001b[0m\u001b[33m╚═══════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "\u001b[0m═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n",
      "PyGRANSO: Python numerical package using GRadient-based Algorithm for Non-Smooth Optimization                    ║ \n",
      "Version 1.1.0                                                                                                    ║ \n",
      "MIT License Copyright (c) 2021 SUN Group @ UMN                                                                   ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣\n",
      "Problem specifications:                                                                                          ║ \n",
      " # of variables                     :   200                                                                      ║ \n",
      " # of inequality constraints        :     1                                                                      ║ \n",
      " # of equality constraints          :     0                                                                      ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "     ║ <--- Penalty Function --> ║                ║ Total Violation ║ <--- Line Search ---> ║ <- Stationarity -> ║ \n",
      "Iter ║    Mu    │      Value     ║    Objective   ║   Ineq   │  Eq  ║ SD │ Evals │     t    ║ Grads │    Value   ║ \n",
      "═════╬═══════════════════════════╬════════════════╬═════════════════╬═══════════════════════╬════════════════════╣\n",
      "   0 ║ 1.000000 │  16.2063030241 ║  13.7635444107 ║ 2.442759 │   -  ║ -  │     1 │ 0.000000 ║     1 │ 28.28938   ║ \n",
      "  10 ║ 0.100000 │  2.59802946760 ║  13.5350279096 ║ 1.244527 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.021953   ║ \n",
      "  20 ║ 0.100000 │  2.19206992214 ║  13.1633300318 ║ 0.875737 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.022714   ║ \n",
      "  30 ║ 0.100000 │  1.78022218437 ║  13.1123257659 ║ 0.468990 │   -  ║ S  │     8 │ 0.039062 ║     1 │ 0.002266   ║ \n",
      "  40 ║ 0.100000 │  1.62759433225 ║  13.0064343193 ║ 0.326951 │   -  ║ S  │     3 │ 0.250000 ║     1 │ 0.009624   ║ \n",
      "  50 ║ 0.100000 │  1.36855881336 ║  12.9963606876 ║ 0.068923 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.006958   ║ \n",
      "  60 ║ 0.100000 │  1.27345969195 ║  12.7345969195 ║ 0.000000 │   -  ║ S  │     4 │ 0.125000 ║     1 │ 0.002180   ║ \n",
      "  70 ║ 0.100000 │  1.26227136878 ║  12.6041312355 ║ 0.001858 │   -  ║ S  │     5 │ 0.937500 ║     1 │ 0.002443   ║ \n",
      "  80 ║ 0.100000 │  1.23715908419 ║  12.3715908419 ║ 0.000000 │   -  ║ S  │     5 │ 0.062500 ║     1 │ 0.011396   ║ \n",
      "  90 ║ 0.100000 │  1.22089273713 ║  12.2083348374 ║ 5.93e-05 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 0.003742   ║ \n",
      " 100 ║ 0.010000 │  0.12120245092 ║  12.1202450919 ║ 0.000000 │   -  ║ S  │     4 │ 0.625000 ║     1 │ 0.004731   ║ \n",
      " 110 ║ 1.00e-04 │  0.00120929461 ║  12.0929460718 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 5.62e-05   ║ \n",
      " 120 ║ 1.00e-04 │  0.00120809043 ║  12.0809042582 ║ 0.000000 │   -  ║ S  │     3 │ 4.000000 ║     1 │ 3.50e-05   ║ \n",
      " 130 ║ 1.00e-07 │  1.2069815e-06 ║  12.0698154585 ║ 0.000000 │   -  ║ \u001b[33mSI\u001b[0m │     8 │ 0.007812 ║     1 │ 1.59e-06   ║ \n",
      " 140 ║ 1.00e-07 │  1.2052185e-06 ║  12.0521845470 ║ 0.000000 │   -  ║ S  │     1 │ 1.000000 ║     1 │ 2.95e-04   ║ \n",
      " 150 ║ 1.00e-07 │  1.2050922e-06 ║  12.0505293460 ║ 3.93e-11 │   -  ║ S  │    26 │ 3194.250 ║     1 │ 8.28e-08   ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "F = final iterate, B = Best (to tolerance), MF = Most Feasible                                                   ║ \n",
      "Optimization results:                                                                                            ║ \n",
      "═════╦═══════════════════════════╦════════════════╦═════════════════╦═══════════════════════╦════════════════════╣\n",
      "   F ║          │                ║  12.0482543559 ║ 2.69e-11 │   -  ║    │       │          ║       │            ║ \n",
      "   B ║          │                ║  12.0482536513 ║ 7.11e-07 │   -  ║    │       │          ║       │            ║ \n",
      "  MF ║          │                ║  12.0482543568 ║ 0.000000 │   -  ║    │       │          ║       │            ║ \n",
      "═════╩═══════════════════════════╩════════════════╩═════════════════╩═══════════════════════╩════════════════════╣\n",
      "Iterations:              152                                                                                     ║ \n",
      "Function evaluations:    715                                                                                     ║ \n",
      "PyGRANSO termination code: 0 --- converged to stationarity and feasibility tolerances.                           ║ \n",
      "═════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\n",
      "Total Wall Time: 58.383323192596436s\n"
     ]
    }
   ],
   "source": [
    "opts.maxit = 200\n",
    "opts.x0 = torch.zeros(p*m,1).to(device=device, dtype=torch.double)\n",
    "# print for every 10 iterations. default: 1\n",
    "opts.print_frequency = 10\n",
    "\n",
    "start = time.time()\n",
    "soln = pygranso(combinedFunction = comb_fn, objEvalFunction = obj_eval_fn,var_dim_map = var_in, torch_device = device, user_opts = opts)\n",
    "end = time.time()\n",
    "print(\"Total Wall Time: {}s\".format(end - start))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1abe9e7",
   "metadata": {},
   "source": [
    "In my testing, with default parameters, PyGRANSO will first obtain a\n",
    "feasible solution at iter ~= 100 and will reduce the objective to\n",
    "11.16 by the time it attains max iteration count of 200.\n",
    "\n",
    "With feasibility_bias = True, in my testing, PyGRANSO will obtain its\n",
    "first feasible solution earlier, at iter ~= 60, but it will ultimately\n",
    "have reduced the objective value less, only to 11.70, by the end of\n",
    "its 200 maximum allowed iterations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
