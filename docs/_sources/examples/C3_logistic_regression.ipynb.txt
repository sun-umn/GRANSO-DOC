{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b910d945",
   "metadata": {},
   "source": [
    "# Logistic Regression\n",
    "\n",
    "Logistic regression problem taken from: SÃ¶ren Laue, Matthias Mitterreiter, and Joachim Giesen. \"GENO--GENeric Optimization for Classical Machine Learning.\" Advances in Neural Information Processing Systems 32 (2019). and https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13b5ad66",
   "metadata": {},
   "source": [
    "## Problem Description\n",
    "Given a data matrix $X$ of dimension $n\\times d$, and a label vector $y\\in\\{-1,+1\\}^n$.\n",
    "\n",
    "We have the following unconstrained optimization problem,\n",
    "\n",
    "$$\\min_{w \\in R^{d}} ||w||_1 + C \\sum_{i=1}^n \\log(\\exp(-y_i(X_i^Tw))+1), $$\n",
    "\n",
    "where $C$ is the inverse of regularization parameter\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73483897",
   "metadata": {},
   "source": [
    "## Modules Importing\n",
    "Import all necessary modules and add PyGRANSO src folder to system path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ae68ad56",
   "metadata": {},
   "outputs": [],
   "source": [
    "from time import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "from sklearn.svm import l1_min_c\n",
    "import sys\n",
    "## Adding PyGRANSO directories. Should be modified by user\n",
    "sys.path.append('/home/buyun/Documents/GitHub/PyGRANSO')\n",
    "from pygranso.pygranso import pygranso\n",
    "from pygranso.pygransoStruct import pygransoStruct\n",
    "import torch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3713c13",
   "metadata": {},
   "source": [
    "## Data Initialization \n",
    "Specify torch device, and generate data\n",
    "\n",
    "Use GPU for this problem. If no cuda device available, please set *device = torch.device('cpu')*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f80d015b",
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda')\n",
    "\n",
    "iris = datasets.load_iris()\n",
    "X = iris.data\n",
    "y = iris.target\n",
    "\n",
    "X = X[y != 2]\n",
    "y = y[y != 2]\n",
    "\n",
    "X /= X.max()  # Normalize X to speed-up convergence\n",
    "\n",
    "# Demo path functions\n",
    "cs = l1_min_c(X, y, loss=\"log\") * np.logspace(0, 7, 16)\n",
    "\n",
    "X = torch.from_numpy(X).to(device=device, dtype=torch.double)\n",
    "y = torch.from_numpy(y).to(device=device, dtype=torch.double)\n",
    "[n,d] = X.shape\n",
    "y = y.unsqueeze(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "174aa2e7",
   "metadata": {},
   "source": [
    "## Function Set-Up\n",
    "\n",
    "Encode the optimization variables, and objective and constraint functions.\n",
    "\n",
    "Note: please strictly follow the format of comb_fn, which will be used in the PyGRANSO main algortihm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "76877185",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variables and corresponding dimensions.\n",
    "var_in = {\"w\": [d,1]}\n",
    "\n",
    "\n",
    "def user_fn(X_struct,X,y,C):\n",
    "    w = X_struct.w\n",
    "    \n",
    "    f = torch.sum(torch.log(torch.exp(-y* (X@w)) + 1))\n",
    "    f+= torch.norm(w,p=1)/C\n",
    "\n",
    "    # inequality constraint \n",
    "    ci = None\n",
    "\n",
    "    # equality constraint\n",
    "    ce = None\n",
    "\n",
    "    return [f,ci,ce]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b21c2ec",
   "metadata": {},
   "source": [
    "## User Options\n",
    "Specify user-defined options for PyGRANSO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "54137e9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "opts = pygransoStruct()\n",
    "opts.torch_device = device\n",
    "opts.maxit = 50\n",
    "opts.opt_tol = 1e-6\n",
    "np.random.seed(1)\n",
    "opts.x0 = torch.zeros(d,1).to(device=device, dtype=torch.double)\n",
    "opts.print_level = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be9ba1d7",
   "metadata": {},
   "source": [
    "## Main Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8ce3b204",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing regularization path ...\n",
      "Problem 1 with C = 0.10007147962830593 completed\n",
      "Problem 2 with C = 0.29307379488744323 completed\n",
      "Problem 3 with C = 0.8583089764312021 completed\n",
      "Problem 4 with C = 2.5136819185942896 completed\n",
      "Problem 5 with C = 7.361680888087905 completed\n",
      "Problem 6 with C = 21.55974671940413 completed\n",
      "Problem 7 with C = 63.14083504447964 completed\n",
      "Problem 8 with C = 184.917063358914 completed\n",
      "Problem 9 with C = 541.5563525125441 completed\n",
      "Problem 10 with C = 1586.0260682241312 completed\n",
      "Problem 11 with C = 4644.906624058538 completed\n",
      "Problem 12 with C = 13603.280537740799 completed\n",
      "Problem 13 with C = 39839.17360792678 completed\n",
      "Problem 14 with C = 116674.77924601595 completed\n",
      "Problem 15 with C = 341698.95806769416 completed\n",
      "Problem 16 with C = 1000714.7962830593 completed\n",
      "This took 13.968s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Computing regularization path ...\")\n",
    "start = time()\n",
    "coefs_ = []\n",
    "i = 0\n",
    "for c in cs:\n",
    "    i += 1\n",
    "    comb_fn = lambda X_struct : user_fn(X_struct,X,y,c)\n",
    "    torch.autograd.set_detect_anomaly(True)\n",
    "    soln = pygranso(var_spec = var_in,combined_fn = comb_fn,user_opts = opts)\n",
    "    print(\"Problem {} with C = {} completed\".format(i,c))\n",
    "    arr = soln.final.x.T.tolist()\n",
    "    arr = np.array(arr).ravel()\n",
    "    coefs_.append(arr)\n",
    "print(\"This took %0.3fs\" % (time() - start))\n",
    "\n",
    "coefs_ = np.array(coefs_)\n",
    "plt.plot(np.log10(cs), coefs_, marker=\"o\")\n",
    "ymin, ymax = plt.ylim()\n",
    "plt.xlabel(\"log(C)\")\n",
    "plt.ylabel(\"Coefficients\")\n",
    "plt.title(\"Logistic Regression Path\")\n",
    "plt.axis(\"tight\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
